package bitutil

import (
	"github.com/stretchr/testify/assert"
	"testing"
	"unsafe"
)

func TestWordSize(t *testing.T) {
	t.Log(wordSize)
}

func TestSafeXORBytes(t *testing.T) {
	a := []byte{12, 34, 28}
	b := []byte{3, 67, 98, 55}
	dst := make([]byte, 4)
	n := safeXORBytes(dst, a, b)
	assert.Equal(t, 3, n)
	t.Log(dst)
	// 12 xor 3 -> 1100 xor 0011 -> 1111 -> 15
	// 34 xor 67 -> 0100010 xor 1000011 -> 1100001 -> 97
	// 28 xor 98 -> 0011100 xor 1100010 -> 1111110 -> 126
}

func TestUnsafePointer(t *testing.T) {
	a := []byte{1, 1, 0, 0, 0, 0, 0, 0}
	aw := *(*[]uintptr)(unsafe.Pointer(&a))

	b := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
	bw := *(*[]uintptr)(unsafe.Pointer(&b))
	bw[0] = aw[0]
	t.Log(b)
	t.Log(bw[0])
	t.Log(len(bw))

	c := []byte{1, 1, 1, 1, 0, 0, 0, 1}
	cw := *(*[]uintptr)(unsafe.Pointer(&c))
	t.Log(cw[0])
}

func BenchmarkSafeXORBytes(b *testing.B) {
	aa := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	bb := []byte{101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
	dst := make([]byte, 100)
	for i := 0; i < b.N; i++ {
		safeXORBytes(dst, aa, bb)
	}
}

func BenchmarkFastXORBytes(b *testing.B) {
	aa := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	bb := []byte{101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
	dst := make([]byte, 100)
	for i := 0; i < b.N; i++ {
		fastXORBytes(dst, aa, bb)
	}
}
